{%- comment -%}
{
  "pack_name": "About - photo frame",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{%- comment -%} Color: check if color is set to transparent {%- endcomment -%}
{%- assign button_alpha = section.settings.button_background_color | color_extract: 'alpha' -%}
{%- assign border_alpha = section.settings.border_color | color_extract: 'alpha' -%}

{%- comment -%} Images: check image crop aspect ratio {%- endcomment -%}
{%- if section.settings.image_crop == 'none' -%}
  {%- assign image_crop_width = section.settings.image.width | default: '1000' -%}
  {%- assign image_crop_height = section.settings.image.height | default: '1200' -%}
{%- else -%}
  {%- assign image_crop_width = section.settings.image_crop | split: ':' | first | times: 1000 -%}
  {%- assign image_crop_height = section.settings.image_crop | split: ':' | last | times: 1000 -%}
{%- endif -%}

{%- comment -%} Images: all placeholders {%- endcomment -%}
{%- assign placeholder_image_id = 'jNVgCpQ0LhQ' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: check text position {%- endcomment -%}
{%- assign horizontal_text_position = section.settings.text_position | split: ' ' | first -%}
{%- assign vertical_text_position = section.settings.text_position | split: ' ' | last -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.signature_font | font_face: font_display: 'swap' }}~
{{ section.settings.signature_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.signature_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.signature_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  {%- capture main_font -%}{{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }}{%- endcapture -%}
  {%- capture heading_font -%}{{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }}{%- endcapture -%}
  {%- capture signature_font -%}{{ section.settings.signature_font.family }}, {{ section.settings.signature_font.fallback_families }}{%- endcapture -%}
{% endif %}

#DP--{{ section.id }} {
  overflow: visible;
  background: {{ section.settings.background_color }};
  margin-bottom: {{ section.settings.outer_margin }}px;
  margin-top: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
  flex-wrap: wrap;
  gap: 10%;
}

#DP--{{ section.id }} .dsgn-pck__column {
  flex: 1 0 45%;
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper {
  border: 1em solid;
  border-color: {{ section.settings.border_color }};
  box-shadow: {%- if border_alpha != 0 -%} 2px 2px 20px rgba(0,0,0, 0.1); {%- endif -%};
  transform: rotate({{ section.settings.angle }}deg);
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper img {
  object-position: {{ section.settings.focal_point }};
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper svg {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__heading {
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
  margin-bottom: 0;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__text p {
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button {
  display: inline-block;
  text-decoration: none;
  padding: 0.5em 1.2em;
  border: thin solid;
  transition: all 0.3s;
  border-radius: {{ section.settings.button_radius }}px;
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  color: {{ section.settings.button_label_color }};
  border-color: {%- if button_alpha != 0 -%}{{ section.settings.button_background_color }}{%- else -%}{{ section.settings.button_label_color }}{%- endif -%};
  background-color: {{ section.settings.button_background_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button:hover {
  {%- if button_alpha != 0 -%}
  background-color: {{ section.settings.button_background_color | color_modify: 'alpha', 0.8 }};
  border-color: transparent;
  {%- else -%}
  background-color: {{ section.settings.button_label_color | color_modify: 'alpha', 0.1 }}
  {%- endif -%};
}

#DP--{{ section.id }} .dsgn-pck__intro-text + .dsgn-pck__heading {
  margin-top: calc({{ section.settings.text_size }}px * 0.15);
}

#DP--{{ section.id }} .dsgn-pck__heading + .dsgn-pck__text {
  margin-top: calc({{ section.settings.text_size }}px * 0.15);
}

#DP--{{ section.id }} .dsgn-pck__heading + .dsgn-pck__button {
  margin-top: calc({{ section.settings.text_size }}px * 0.2);
}

#DP--{{ section.id }} .dsgn-pck__text + .dsgn-pck__button {
  margin-top: calc({{ section.settings.text_size }}px * 0.2);
}

#DP--{{ section.id }} .dsgn-pck__vertical-text {
  line-height: 0.8;
  position: absolute;
  bottom: 0;
  left: 0;
  transform: rotate(-90deg);
  font-size: 35px;
  transform-origin: bottom left;
  color: {{ section.settings.signature_color }};
  padding-bottom: calc(5px + {{ section.settings.signature_font.baseline_ratio }}px);
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ signature_font }};
  font-weight: {{ section.settings.signature_font.weight }};
  font-style: {{ section.settings.signature_font.style }};
  {%- endif -%}
}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 70%;
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
    gap: 40px;
  }

  #DP--{{ section.id }} .dsgn-pck__column {
    max-width: 90%;
    margin: 0 auto;
    flex: 1 0 100%;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck dsgn-pck__section">
  <div class="dsgn-pck__sizer
              dsgn-pck__flex
              {% if section.settings.image_position == 'right' -%}
                dsgn-pck__flex-row-reverse
              {%- endif -%}">
    <div class="dsgn-pck__image dsgn-pck__column" style="--dsgn-pck-animate: 0;">
      <div class="dsgn-pck__image__wrapper">
        <svg viewBox="0 0 {{ image_crop_width }} {{ image_crop_height }}"></svg>
        {%- if section.settings.image != blank -%}
          {{ section.settings.image | image_url: width: 800 | image_tag: loading: 'lazy' }}
        {%- else -%}
          <img src="https://source.unsplash.com/{{ placeholder_image_id }}/1000x1000"
              alt=""
              loading="lazy"
              width="1000"
              height="1000">
        {%- endif -%}
        <div class="dsgn-pck__vertical-text">
          {{ section.settings.vertical_text }}
        </div>
      </div>
    </div>
    <div class="dsgn-pck__content dsgn-pck__column dsgn-pck__flex dsgn-pck__justify-{{ horizontal_text_position }} dsgn-pck__align-{{ vertical_text_position }}">
      <div class="dsgn-pck__inner-content">
        {%- if section.settings.title != blank -%}
          <h2 class="dsgn-pck__heading" style="--dsgn-pck-animate: 1;">
            {{ section.settings.title }}
          </h2>
        {%- endif -%}
        {%- if section.settings.text != blank -%}
          <div class="dsgn-pck__text dsgn-pck__rte" style="--dsgn-pck-animate: 2;">
            {{ section.settings.text }}
          </div>
        {%- endif -%}
        {%- if section.settings.button_label != blank -%}
          <a class="dsgn-pck__button" style="--dsgn-pck-animate: 3;" href="{{ section.settings.button_link }}">{{ section.settings.button_label }}</a>
        {%- endif -%}
      </div>
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "About - photo frame",
  "class": "DP__about-photo-frame",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Image"
    },
    {
      "type": "select",
      "id": "image_crop",
      "label": "Image aspect ratio",
      "default": "1:1",
      "options": [
        {
          "value": "4:3",
          "label": "Landscape (4:3)"
        },
        {
          "value": "2:3",
          "label": "Portrait (2:3)"
        },
        {
          "value": "1:1",
          "label": "Square (1:1)"
        },
        {
          "value": "none",
          "label": "Original"
        }
      ]
    },
    {
      "type": "select",
      "id": "focal_point",
      "label": "Image focal point",
      "info": "Used to keep the subject of your photo in view.",
      "default": "center center",
      "options": [
        {
          "value": "20% 0",
          "label": "Top left"
        },
        {
          "value": "top center",
          "label": "Top center"
        },
        {
          "value": "80% 0",
          "label": "Top right"
        },
        {
          "value": "20% 50%",
          "label": "Left"
        },
        {
          "value": "center center",
          "label": "Center"
        },
        {
          "value": "80% 50%",
          "label": "Right"
        },
        {
          "value": "20% 100%",
          "label": "Bottom left"
        },
        {
          "value": "bottom center",
          "label": "Bottom center"
        },
        {
          "value": "80% 100%",
          "label": "Bottom right"
        }
      ]
    },
    {
      "type": "select",
      "id": "image_position",
      "label": "Image position",
      "default": "left",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ]
    },
    {
      "type": "range",
      "id": "angle",
      "label": "Image angle",
      "min": -10,
      "max": 10,
      "default": 0,
      "unit": "deg"
    },
    {
      "type": "text",
      "id": "vertical_text",
      "label": "Image signature",
      "default": "About us"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Glad to meet you!"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text",
      "default": "<p>Pair text with an image to give a sense of who is behind the products (that's you!). Add your personality and explain why your shop and brand is worth buying.</p>"
    },
    {
      "type": "text",
      "id": "button_label",
      "label": "Button",
      "default": "Read our story"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Button link"
    },
    {
      "type": "select",
      "id": "text_position",
      "label": "Text position",
      "default": "left center",
      "options": [
        {
          "value": "left top",
          "label": "Top left"
        },
        {
          "value": "center top",
          "label": "Top center"
        },
        {
          "value": "right top",
          "label": "Top right"
        },
        {
          "value": "left center",
          "label": "Left"
        },
        {
          "value": "center center",
          "label": "Center"
        },
        {
          "value": "right center",
          "label": "Right"
        },
        {
          "value": "left bottom",
          "label": "Bottom left"
        },
        {
          "value": "center bottom",
          "label": "Bottom center"
        },
        {
          "value": "right bottom",
          "label": "Bottom right"
        }
      ]
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 120,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#4B4949"
    },
    {
      "type": "color",
      "id": "signature_color",
      "label": "Signature",
      "default": "#4B4949"
    },
    {
      "type": "color",
      "id": "button_label_color",
      "label": "Button label",
      "default": "#4B4949"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "range",
      "id": "button_radius",
      "label": "Button border radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Image border",
      "default": "#ffffff"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background",
      "default": "linear-gradient(136deg, rgba(191, 122, 122, 1) 11%, rgba(250, 241, 233, 1) 84%)"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "fade-in",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 60,
      "max": 90,
      "step": 5,
      "default": 80,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "liquid",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "liquid",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    },
    {
      "type": "font_picker",
      "id": "signature_font",
      "label": "Signature",
      "default": "sagrantino_n4"
    }
  ],
  "presets": [
    {
      "name": "About - photo frame 🎒",
      "settings": {
      }
    }
  ]
}
{% endschema %}

{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>

{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}">
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    load: function(section){

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
