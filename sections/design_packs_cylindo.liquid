{%- comment -%}
{
  "pack_name": "Cylindo",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This premium section will not display properly without an active subscription for <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a>. If you need any support please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with your questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{% comment %} Cylindo Viewer Styling {% endcomment %}
<link rel="stylesheet" type="text/css" href="https://viewer.cylindo.com/v4/viewer.min.css">

{%- comment -%} Color: check if color is set to transparent {%- endcomment -%}
{%- assign button_alpha = section.settings.button_background_color | color_extract: 'alpha' -%}

{%- comment -%} Images: check image crop aspect ratio {%- endcomment -%}
{%- if section.settings.image_crop == 'none' -%}
  {%- assign image_crop_width = section.settings.image.width | default: '1000' -%}
  {%- assign image_crop_height = section.settings.image.height | default: '1200' -%}
{%- else -%}
  {%- assign image_crop_width = section.settings.image_crop | split: ':' | first | times: 1000 -%}
  {%- assign image_crop_height = section.settings.image_crop | split: ':' | last | times: 1000 -%}
{%- endif -%}

{%- comment -%} Images: all placeholders {%- endcomment -%}
{%- assign placeholder_image_id = 'oRWRlTgBrPo' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  {%- capture main_font -%}{{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }}{%- endcapture -%}
  {%- capture heading_font -%}{{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }}{%- endcapture -%}
{%- endif -%}

  /*CYLINDO*/

#DP--{{ section.id }} h1 {
  text-align: center;
}

#DP--{{ section.id }} .tt_cylindo_area {
	position: relative;
}

#DP--{{ section.id }} .cylindo_grid {
  display: grid;
  grid-template-columns: 4fr 3fr;
  grid-gap: 30px;
  margin-right: 80px;
}

#DP--{{ section.id }} .cylindo_options {
  {% comment %} align-self: center; {% endcomment %}
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-gap: 0px;
}

#DP--{{ section.id }} .cylindo_options_section h2 {
  border-bottom: 1px solid;
	padding-bottom: 10px;
	margin-bottom: 20px;;
}


#DP--{{ section.id }} .panel_size_bar {
  margin: 0 auto;
  padding: 0;
  list-style: none;
	display: flex;
	flex-wrap: wrap;
	align-items: center;
} 

#DP--{{ section.id }} .panel_size_bar p {
  margin: 0;
	pointer-events: none;
} 

#DP--{{ section.id }} .panel_size {
  cursor: pointer;
	margin-right: 15px;
	margin-bottom: 15px;
	display: flex;
	align-items: center;

}

#DP--{{ section.id }} .panel_size:hover {
  font-weight: bold;
}

#DP--{{ section.id }} .panel_size.selected{
  font-weight: bold;
}



 /*END CYLINDO*/

#DP--{{ section.id }} {
  margin-top: {{ section.settings.outer_margin }}px;
  margin-bottom: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
}

#DP--{{ section.id }} .dsgn-pck__background {
  background: {{ section.settings.background_color }};
}

#DP--{{ section.id }} .dsgn-pck__grid {
  display: grid;
  grid-template-columns: repeat(2, minmax(250px, 1fr));
	grid-gap: 30px;
}

#DP--{{ section.id }} .dsgn-pck__text p:last-of-type {
  margin-bottom: 1.2rem;
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper {
  pointer-events: none;
	width: {{ section.settings.image_size }}px;
	height: 100%;
  display: inline-block;
	margin-right: 10px;
}
#DP--{{ section.id }} .dsgn-pck__image__wrapper img {
  object-position: {{ section.settings.focal_point }};
}

#DP--{{ section.id }} .dsgn-pck__image--circle .dsgn-pck__image__wrapper img {
  border-radius: 50%;
}

#DP--{{ section.id }} .dsgn-pck__image--rounded .dsgn-pck__image__wrapper img {
  border-radius: 5px;
}

#DP--{{ section.id }} .dsgn-pck__image--circle svg,
#DP--{{ section.id }} .dsgn-pck__image--rounded svg,
#DP--{{ section.id }} .dsgn-pck__image--square svg {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__image--none img {
  object-fit: contain;
}

#DP--{{ section.id }} .dsgn-pck__image--none svg {
  margin: auto;
}

#DP--{{ section.id }} .dsgn-pck__content {
  padding: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  color: {{ section.settings.text_color }};
  background: {{ section.settings.text_background_color }};
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  width: min(400px, 80%);
  margin: auto;
}

#DP--{{ section.id }} .dsgn-pck__heading {
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__heading + .dsgn-pck__text {
  margin-top: calc(10px * {{ section.settings.text_size | times: 0.015 }});
}

#DP--{{ section.id }} .dsgn-pck__text p {
  line-height: calc(3px + 3ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__text + .dsgn-pck__button {
  margin-top: calc(10px * {{ section.settings.text_size | times: 0.02 }});
}

#DP--{{ section.id }} .dsgn-pck__button {
  margin-top: 1.2em;
  border-color: transparent;
  display: inline-block;
  text-decoration: none;
  padding: 0.5em 1.2em;
  transition: all 0.3s ease-in-out;
  border: thin solid;
  border-radius: {{ section.settings.button_radius }}px;
  border-color: {%- if button_alpha != 0 -%}{{ section.settings.button_background_color }}{%- else -%}{{ section.settings.button_label_color }}{%- endif -%};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  color: {{ section.settings.button_label_color }};
  background-color: {{ section.settings.button_background_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button:hover {
  opacity: 1;
  {%- if button_alpha != 0 -%}
  background-color: {{ section.settings.button_background_color | color_darken: 10 }};
  border-color: transparent;
  {%- else -%}
  background-color: {{ section.settings.button_label_color | color_modify: 'alpha', 0.1 }}
  {%- endif -%};
}

#DP--{{ section.id }} .dsgn-pck__button::after {
  display: none;
}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__grid {
    grid-template-columns: repeat(1, minmax(250px, 1fr));
  }

  #DP--{{ section.id }} .dsgn-pck__inner-content {
    width: min(400px, 100%);
  }

  #DP--{{ section.id }} div.dsgn-pck__button-area {
    grid-template-columns: 1fr;
    width: 100%;
    gap: 10px;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__image-with-text-simple dsgn-pck__section">
  <div class="dsgn-pck__background">
    <div class="dsgn-pck__sizer
                dsgn-pck__grid
                {% if section.settings.image_position == 'right' -%}
                  dsgn-pck__grid-reverse
                {%- endif -%}">
      <!-- 360 HD Viewer -->
      <div id="cylindo_section--{{ section.id }}" style="--dsgn-pck-animate: 2;"></div>

      <div class="dsgn-pck__content dsgn-pck__flex " style="--dsgn-pck-animate: 1;">
        <div class="dsgn-pck__inner-content">
          <div class="cylindo_options">
						{%- capture cylindo_types -%}
							{%- for block in section.blocks -%}
								{%- if block.type == "option" -%}
									{{ block.settings.name | strip }}
									{%- unless forloop.last -%}::{%- endunless -%}
								{%- endif -%}
							{%- endfor -%}
						{%- endcapture -%}

						{% assign cylindo_types_array = cylindo_types | split: "::" | uniq %}
				
						{%- for cylindo_type in cylindo_types_array -%}
							{%- assign new_cylindo_type = cylindo_type | strip -%}
							<div class="cylindo_options_section">
								<h2>{{ new_cylindo_type }}</h2>
								<ul class="panel_size_bar">
									{%- for block in section.blocks -%}
										{%- if block.type == 'option' and block.settings.name == new_cylindo_type -%}
											<li data-type="{{ new_cylindo_type }}" data-option="{{ block.settings.value }}" class="panel_size panel_get {% if forloop.first %} selected {% endif %} dsgn-pck__image--{{ section.settings.image_crop }}">
												{% if block.settings.image != blank %}
													<picture class="dsgn-pck__image__wrapper">
														<svg viewBox="0 0 1000 1000"></svg>
														{{ block.settings.image | image_url: width: 1000 | image_tag: loading: 'lazy' }}
													</picture>
												{% endif %}
												{% if block.settings.image == blank %}
													<p>{{ block.settings.value }}</p>
												{% endif %}
											</li>
										{%- endif -%}
									{%- endfor -%}
								</ul>
							</div>
						{%- endfor -%}
					</div>
        </div>
      </div>
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Cylndo DP 🛋",
  "class": "DP__cylindo",
  "settings": [
		{
      "type": "select",
      "id": "image_position",
      "label": "Cylindo position",
      "default": "right",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ]
    },
		{
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Heading"
    },
    {
      "type": "header",
      "content": "Cylindo Set up 👷‍♀️"
    },
    {
      "type": "number",
      "id": "account_id",
      "label": "Cylindo Account ID"
    },
    {
      "type": "text",
      "id": "sku",
      "label": "SKU"
    },
    {
      "type": "text",
      "id": "initial_features",
      "label": "Initial Features"
    },
    {
      "type": "text",
      "id": "country",
      "label": "Country",
      "default": "us"
    },
    {
      "type": "number",
      "id": "viewer_type",
      "label": "Viewer Type number"
    },
    {
      "type": "checkbox",
      "id": "show_thumbs",
      "label": "Show thumbnail photos",
      "default": false
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 90,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#283144"
    },
    {
      "type": "color_background",
      "id": "text_background_color",
      "label": "Text background",
      "default": "linear-gradient(0deg, rgba(255, 255, 255, 1), rgba(255, 255, 255, 1) 100%)"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "fade-in",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
		{
			"type": "range",
			"id": "image_size",
			"label": "Option Image size",
			"default": 50,
			"min": 5,
			"max": 100,
			"step": 5,
			"unit": "px"
		},
		{
      "type": "select",
      "id": "image_crop",
      "label": "Image crop",
      "default": "circle",
      "options": [
        {
          "value": "circle",
          "label": "Circle"
        },
        {
          "value": "rounded",
          "label": "Rounded"
        },
        {
          "value": "square",
          "label": "Square"
        }
      ]
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 60,
      "max": 100,
      "step": 5,
      "default": 100,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 60,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "html",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "html",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "blocks": [
    {
      "type": "option",
      "name": "Option",
      "settings": [
        {
          "type": "text",
          "id": "name",
          "label": "Name"
        },
        {
          "type": "text",
          "id": "value",
          "label": "Value"
        },
				{
					"type": "image_picker",
					"id": "image",
					"label": "Image"
				}
      ]
    }
  ],
  "presets": [
    {
      "name": "Cylindo DP 🛋",
      "settings": {}
    }
  ]
}
{% endschema %}
<!-- insert viewer.min.js -->
   <script src="https://viewer.cylindo.com/v4/viewer.min.js"></script>

{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>

{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}">
(function(){

  const designPack = {
    settings: {},
		selected_options: {},
		opts:  {  
				'accountID': {{ section.settings.account_id }},
				'SKU': "{{ section.settings.sku}}",
				'features': "{{ section.settings.initial_features }}",
				'country': "{{ section.settings.country }}",
				'viewerType': "{{ section.settings.viewer_type }}",  
				'thumbs': {{ section.settings.show_thumbs }},  
				'containerID': '#cylindo_section--{{ section.id }}',
				'alternateContent': []
		},
		viewerInstance: null,
		flattenObject: function(the_object) {
      var the_array = []
      for(x in the_object){
				console.log(x, the_object[x])
        the_array.push(x)
        the_array.push(the_object[x])
      }
      return the_array
    },
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
		cylindoSetup: function(){
			{% comment %} var viewerInstance = null; {% endcomment %}

			var options = {};

			{%- for cylindo_type in cylindo_types_array -%}
				{%- assign new_cylindo_type = cylindo_type | strip -%}
					options["{{ new_cylindo_type }}"] = [];
				{%- for block in section.blocks -%}
					{%- if block.type == 'option' and block.settings.name == new_cylindo_type -%}
					options["{{ new_cylindo_type }}"].push("{{ block.settings.value }}") ;
					{%- endif -%}
				{%- endfor -%}
			{%- endfor -%} 

			console.log('options', options)
			console.log("DSIG", designPack)

			{% comment %} var selected_options = {}; {% endcomment %}

			{%- for cylindo_type in cylindo_types_array -%}
				{%- assign new_cylindo_type = cylindo_type | strip -%}
				{%- for block in section.blocks -%}
					{%- if block.type == 'option' and block.settings.name == new_cylindo_type -%}
						designPack.selected_options["{{ new_cylindo_type }}"] = "{{ block.settings.value }}";
					{%- endif -%}
				{%- endfor -%}
			{%- endfor -%} 

			console.log('selected options', designPack.selected_options)
{% comment %} 

			var opts = {  
				'accountID': {{ section.settings.account_id }},
				'SKU': "{{ section.settings.sku}}",
				'features': "{{ section.settings.initial_features }}",
				'country': "{{ section.settings.country }}",
				'viewerType': "{{ section.settings.viewer_type }}",  
				'thumbs': {{ section.settings.show_thumbs }},  
				'containerID': '#cylindo_section',
				'alternateContent': []
			} {% endcomment %}

			//instantiate Viewer
			// make sure the cylindo framework has been "installed"
			if (cylindo) {
				// do not instantiate the viewer until the framework reports ready.
				cylindo.on('ready', function () {
					// create the instance
					designPack.viewerInstance = cylindo.viewer.create(designPack.opts);
					if(designPack.viewerInstance){
						// getCurrentImage()
						
					}
				});
			}
		},
    load: function(section){
			this.cylindoSetup();

			let panels = document.querySelectorAll('.panel_get');

			panels.forEach((panel) => {
				panel.addEventListener('click', (e) => {
					designPack.selected_options[e.target.dataset.type] =  e.target.dataset.option
					console.log('in foreach for even',e.target.dataset.type, e.target.dataset.option)
					var new_features = this.flattenObject(designPack.selected_options)
					console.log('new features', new_features)
					designPack.opts.features = new_features
					designPack.viewerInstance.setFeatures(designPack.opts.features)
				});
			})

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
