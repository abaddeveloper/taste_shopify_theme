{%- comment -%}
{
  "pack_name": "Call to action - simple v2",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This section or template will not display properly without the <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a> app installed. Please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with any questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: check text position {%- endcomment -%}
{%- assign horizontal_text_position = section.settings.text_position | split: ' ' | first -%}
{%- assign vertical_text_position = section.settings.text_position | split: ' ' | last -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  {%- capture main_font -%}{{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }}{%- endcapture -%}
  {%- capture heading_font -%}{{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }}{%- endcapture -%}
{%- endif -%}

#DP--{{ section.id }} {
  background: {{ section.settings.background_color }};
  margin-top: {{ section.settings.outer_margin }}px;
  margin-bottom: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  width: 90%;
  margin: auto;
  max-width: {{ max_width }};
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
}

#DP--{{ section.id }} .dsgn-pck__background {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper::before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  z-index: 1;
  background: {{ section.settings.image_overlay_color }};
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper img {
  object-position: {{ section.settings.focal_point }};
}

#DP--{{ section.id }} .dsgn-pck__grid {
  height: 100%;
}

#DP--{{ section.id }} .dsgn-pck__content {
  z-index: 2;
  height: 100%;
  grid-template-columns: 1fr;
  grid-area: 1 / 1 / 2 / 2;
  padding: 5% 0;
}

#DP--{{ section.id }} .dsgn-pck__block + .dsgn-pck__block {
  margin-top: calc(10px * {{ section.settings.text_size | times: 0.008 }});
}

#DP--{{ section.id }} .dsgn-pck__block--heading + .dsgn-pck__block {
  margin-top: calc(20px * {{ section.settings.text_size | times: 0.008 }});
}

#DP--{{ section.id }} .dsgn-pck__block + .dsgn-pck__block--buttons {
  margin-top: calc(20px * {{ section.settings.text_size | times: 0.008 }});
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  z-index: 2;
  max-width: {{ section.settings.text_width }}px;
  width: 100%;
  padding: {%- if section.settings.text_background_color != blank -%}clamp(10px, 5%, 40px){%- endif -%};
  background: {{ section.settings.text_background_color }};
}

#DP--{{ section.id }} .dsgn-pck__small-text p {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.008 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__heading {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 45px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__text p {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__text-alignment-left .dsgn-pck__button-area {
  margin-right: auto;
  margin-left: 0;
}

#DP--{{ section.id }} .dsgn-pck__text-alignment-right .dsgn-pck__button-area {
  margin-left: auto;
  margin-right: 0;
}

#DP--{{ section.id }} .dsgn-pck__text-alignment-center .dsgn-pck__button-area {
  margin-left: auto;
  margin-right: auto;
}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__inner-content {
    min-width: 100%;
  }

  #DP--{{ section.id }} div.dsgn-pck__button-area {
    grid-template-columns: 1fr;
    width: 100%;
    gap: 10px;
  }

  #DP--{{ section.id }} div.dsgn-pck__button-area {
    grid-template-columns: 1fr;
    width: 100%;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}"  class="DP--{{ section.id }} dsgn-pck__call-to-action-simple dsgn-pck__section">
  <div class="dsgn-pck__background">
    {%- if section.settings.link != blank -%}
      <a class="dsgn-pck__absolute-link" href="{{ section.settings.link }}">{{ section.settings.link.title }}</a>
    {% endif %}
    <div class="dsgn-pck__sizer dsgn-pck__grid">
      <div class="dsgn-pck__content
                  dsgn-pck__flex dsgn-pck__justify-{{ horizontal_text_position }}
                  dsgn-pck__align-{{ vertical_text_position }}
                  dsgn-pck__text-alignment-{{ section.settings.text_alignment }}">
        {%- if section.settings.link != blank -%}
          <a class="dsgn-pck__absolute-link" href="{{ section.settings.link }}">{{ section.settings.background_image.alt }}</a>
        {% endif %}
        <div class="dsgn-pck__inner-content dsgn-pck__relative">
          {%- for block in section.blocks -%}
            <div id="DP--{{ block.id }}" class="dsgn-pck__block dsgn-pck__block--{{ block.type }}" {{ block.shopify_attributes }} style="--dsgn-pck-animate: {{ forloop.index }};">
              {%- case block.type -%}
                {%- when 'divider' -%}
                  <style>
                    #DP--{{ block.id }} {
                      padding-top: {{ block.settings.padding_top }}px;
                      padding-bottom: {{ block.settings.padding_bottom }}px;
                    }

                    #DP--{{ block.id }} .dsgn-pck__divider {
                      height: 0;
                      border: none;
                      background: transparent;
                      {%- if block.settings.alignment == 'left' -%}
                        margin: 0;
                      {%- else -%}
                        margin: 0 auto;
                      {%- endif -%}
                      width: {{ block.settings.base_width }}%;
                      border-top: {{ block.settings.thickness }}px {{ block.settings.style }} {{ block.settings.divider_color }};
                    }
                  </style>
                  <hr class="dsgn-pck__divider" aria-hidden="true">

                {%- when 'small_text' -%}
                  {%- if block.settings.title != blank -%}
                    <div class="dsgn-pck__small-text dsgn-pck__rte">
                      {{ block.settings.title }}
                    </div>
                  {%- endif -%}
                {%- when 'heading' -%}
                  {%- if block.settings.title != blank -%}
                    <h2 class="dsgn-pck__heading">
                      {{ block.settings.title | newline_to_br }}
                    </h2>
                  {%- endif -%}
                {%- when 'text' -%}
                  {%- if block.settings.text != blank -%}
                    <div class="dsgn-pck__text dsgn-pck__rte">
                      {{ block.settings.text }}
                    </div>
                  {%- endif -%}
                {%- when 'buttons' -%}
                  <style>
                    {%- assign button_alpha_primary = block.settings.button_background_color_primary | color_extract: 'alpha' -%}
                    {%- assign button_alpha_secondary = block.settings.button_background_color_secondary | color_extract: 'alpha' -%}

                    #DP--{{ section.id }} .dsgn-pck__button-area {
                      display: grid;
                      grid-gap: 32px;
                      margin-top: 2em;
                      {%- if block.settings.button_label_primary != blank and block.settings.button_label_secondary != blank -%}
                        grid-template-columns: repeat(2, 1fr);
                      {%- else -%}
                        grid-template-columns: 1fr;
                        max-width: 200px;
                      {%- endif -%}
                      max-width: 100%;
                      width: fit-content;
                    }

                    #DP--{{ section.id }} .dsgn-pck__button {
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      text-align: center;
                      text-decoration: none;
                      padding: 0.5em 1.2em;
                      border: thin solid;
                      transition: all 0.3s ease-in-out;
                      border-radius: {{ block.settings.button_radius }}px;
                      line-height: calc(3px + 2ex + 3px);
                      font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                      {%- if section.settings.override_theme_font != blank -%}
                      font-family: {{ main_font }};
                      font-weight: {{ section.settings.main_font.weight }};
                      font-style: {{ section.settings.main_font.style }};
                      {%- endif -%}
                    }

                    #DP--{{ section.id }} .dsgn-pck__button-primary {
                      color: {{ block.settings.button_label_color_primary }};
                      border-color: {%- if button_alpha_primary != 0 -%}{{ block.settings.button_background_color_primary }}{%- else -%}{{ block.settings.button_label_color_primary }}{%- endif -%};
                      background-color: {{ block.settings.button_background_color_primary }};
                    }

                    #DP--{{ section.id }} .dsgn-pck__button-secondary {
                      color: {{ block.settings.button_label_color_secondary }};
                      border-color: {%- if button_alpha_secondary != 0 -%}{{ block.settings.button_background_color_secondary }}{%- else -%}{{ block.settings.button_label_color_secondary }}{%- endif -%};
                      background-color: {{ block.settings.button_background_color_secondary }};
                    }

                    #DP--{{ section.id }} .dsgn-pck__button-primary:hover {
                      opacity: 1;
                      {%- if button_alpha_primary != 0 -%}
                      background-color: {{ block.settings.button_background_color_primary | color_darken: 10 }};
                      border-color: transparent;
                      {%- else -%}
                      background-color: {{ block.settings.button_label_color_primary | color_modify: 'alpha', 0.1 }}
                      {%- endif -%};
                    }

                    #DP--{{ section.id }} .dsgn-pck__button-secondary:hover {
                      opacity: 1;
                      {%- if button_alpha_secondary != 0 -%}
                      background-color: {{ block.settings.button_background_color_secondary | color_darken: 10 }};
                      border-color: transparent;
                      {%- else -%}
                      background-color: {{ block.settings.button_label_color_secondary | color_modify: 'alpha', 0.1 }}
                      {%- endif -%};
                    }
                  </style>
                  <div class="dsgn-pck__button-area">
                    {%- if block.settings.button_label_primary != blank -%}
                      <a class="dsgn-pck__button dsgn-pck__button-primary" {%- if block.settings.link_primary != blank -%} href="{{ block.settings.link_primary }}" {%- endif -%}>{{ block.settings.button_label_primary }}</a>
                    {%- endif -%}
                    {%- if block.settings.button_label_secondary != blank -%}
                      <a class="dsgn-pck__button dsgn-pck__button-secondary" {%- if block.settings.link_secondary != blank -%}href="{{ block.settings.link_secondary }}"{%- endif -%}>{{ block.settings.button_label_secondary }}</a>
                    {%- endif -%}
                  </div>
              {%- endcase -%}
            </div>
          {%- endfor -%}
        </div>
      </div>
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Call to action - simple",
  "class": "DP__call-to-action-simple-v2",
  "settings": [
    {
      "type": "url",
      "id": "link",
      "label": "Link",
      "info": "Links entire banner."
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 150,
      "unit": "%"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "default": "center",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ]
    },
    {
      "type": "select",
      "id": "text_position",
      "label": "Text position",
      "default": "center center",
      "options": [
        {
          "value": "left top",
          "label": "Top left"
        },
        {
          "value": "center top",
          "label": "Top center"
        },
        {
          "value": "right top",
          "label": "Top right"
        },
        {
          "value": "left center",
          "label": "Left"
        },
        {
          "value": "center center",
          "label": "Center"
        },
        {
          "value": "right center",
          "label": "Right"
        },
        {
          "value": "left bottom",
          "label": "Bottom left"
        },
        {
          "value": "center bottom",
          "label": "Bottom center"
        },
        {
          "value": "right bottom",
          "label": "Bottom right"
        }
      ]
    },
    {
      "type": "range",
      "id": "text_width",
      "label": "Text box width",
      "min": 400,
      "max": 1000,
      "step": 10,
      "default": 600,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#FFFFFF"
    },
    {
      "type": "color_background",
      "id": "text_background_color",
      "label": "Text background",
      "default": "linear-gradient(320deg, rgba(43, 43, 43, 0.5) 100%, rgba(255, 201, 104, 1) 100%)"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background",
      "default": "linear-gradient(180deg, rgba(255, 169, 49, 1), rgba(207, 115, 25, 1) 100%)"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "fade-in",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint. Prevents inner content from moving too far to the edge on large screens."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "textarea",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "textarea",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "blocks": [
    {
      "type": "small_text",
      "name": "Small text",
      "settings": [
        {
          "type": "richtext",
          "id": "title",
          "label": "Small text",
          "default": "<p>SIMPLE CTA</p>"
        }
      ]
    },
    {
      "type": "heading",
      "name": "Heading",
      "settings": [
        {
          "type": "textarea",
          "id": "title",
          "label": "Heading",
          "default": "All purpose banner"
        }
      ]
    },
    {
      "type": "text",
      "name": "Regular text",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>This is a simple call to action that can be placed anywhere in your theme.</p>"
        }
      ]
    },
    {
      "type": "buttons",
      "name": "Buttons",
      "settings": [
        {
          "type": "range",
          "id": "button_radius",
          "label": "Button border radius",
          "min": 0,
          "max": 50,
          "step": 5,
          "default": 0,
          "unit": "px"
        },
        {
          "type": "text",
          "id": "button_label_primary",
          "label": "Primary button",
          "default": "Learn more"
        },
        {
          "type": "url",
          "id": "link_primary",
          "label": "Primary link"
        },
        {
          "type": "color",
          "id": "button_label_color_primary",
          "label": "Primary button label",
          "default": "#FFFFFF"
        },
        {
          "type": "color",
          "id": "button_background_color_primary",
          "label": "Primary button background",
          "default": "rgba(0,0,0,0)"
        },
        {
          "type": "text",
          "id": "button_label_secondary",
          "label": "Secondary button",
          "default": "Shop now"
        },
        {
          "type": "url",
          "id": "link_secondary",
          "label": "Secondary link"
        },
        {
          "type": "color",
          "id": "button_label_color_secondary",
          "label": "Secondary button label",
          "default": "#283144"
        },
        {
          "type": "color",
          "id": "button_background_color_secondary",
          "label": "Secondary button background",
          "default": "#FAFAFA"
        }
      ]
    },
    {
      "type": "divider",
      "name": "Divider",
      "settings": [
        {
          "type": "select",
          "id": "alignment",
          "label": "Alignment",
          "default": "center",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            }
          ]
        },
        {
          "type": "range",
          "id": "base_width",
          "label": "Width",
          "min": 20,
          "max": 100,
          "step": 5,
          "default": 50,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "thickness",
          "label": "Thickness",
          "min": 0,
          "max": 10,
          "default": 1,
          "unit": "px"
        },
        {
          "type": "select",
          "id": "style",
          "label": "Style",
          "default": "solid",
          "options": [
            {
              "value": "solid",
              "label": "Solid line"
            },
            {
              "value": "dotted",
              "label": "Dotted line"
            },
            {
              "value": "dashed",
              "label": "Dashed line"
            },
            {
              "value": "double",
              "label": "Double line"
            }
          ]
        },
        {
          "type": "header",
          "content": "🎨 Design"
        },
        {
          "type": "color",
          "id": "divider_color",
          "label": "Color",
          "default": "#FFFFFF"
        },
        {
          "type": "header",
          "content": "🖼 Layout"
        },
        {
          "type": "range",
          "id": "padding_top",
          "label": "Padding - top",
          "min": 0,
          "max": 100,
          "default": 40,
          "step": 5,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "padding_bottom",
          "label": "Padding - bottom",
          "min": 0,
          "max": 100,
          "default": 40,
          "step": 5,
          "unit": "px"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Call to action - simple 🎒",
      "settings": {
      },
      "blocks": [
        {
          "type": "small_text"
        },
        {
          "type": "heading"
        },
        {
          "type": "text"
        },
        {
          "type": "buttons"
        }
      ]
    }
  ]
}
{% endschema %}

  {%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}">
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    load: function(section){

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
